---
# file: tasks/main.yml
# Top-level installer for Fluentd.
#
# @see http://docs.treasuredata.com/articles/fluentd
#
- name: cleanup old configs and plugins
  file:
    state: absent
    path: "{{ item }}/"
  with_items:
    - /etc/fluent/conf.d
    - /etc/fluent/plugin
  when: fluentd_do_cleanup_old

- name: Install fluentd using TreasureData script
  shell: curl -fsSL https://toolbelt.treasuredata.com/sh/install-ubuntu-noble-fluent-package5-lts.sh | sh
  args:
    executable: /bin/bash
  tags: fluentd_install
  when: ansible_pkg_mgr == "apt"

- name: Ensure fluentd group exists
  group:
    name: fluentd
    state: present

- name: Ensure fluentd user exists
  user:
    name: fluentd
    group: fluentd
    system: yes
    shell: /usr/sbin/nologin
    create_home: no

- name: mkdir for conf.d
  file:
    path: "{{item}}"
    state: directory
    owner: fluentd
    group: fluentd
  with_items:
    - /etc/fluent/conf.d
    - /etc/fluent/plugin

- name: rename default fluentd.conf
  command: creates="/etc/fluent/fluentd.conf.bak" mv /etc/fluent/fluentd.conf /etc/fluent/fluentd.conf.bak

- name: copy new fluentd.conf from role's default
  copy:
    src: ../files/fluentd.conf
    dest: /etc/fluent/fluentd.conf
    owner: fluentd
    group: fluentd
  when: fluentd_conf_copy is not defined and fluentd_conf_template is not defined

- name: copy new "fluentd.conf" verbatim from main playbook's
  copy:
    src: "{{ playbook_dir }}/{{ tdagent_conf_copy }}"
    dest: /etc/fluent/fluentd.conf
    owner: fluentd
    group: fluentd
  when: fluentd_conf_copy is defined

- name: copy (from template) new "fluentd.conf" from main playbook's
  template:
    src: "{{ playbook_dir }}/{{ tdagent_conf_template }}"
    dest: /etc/fluent/fluentd.conf
    owner: fluentd
    group: fluentd
  when: fluentd_conf_template is defined

- name: copy other config files from playbook's, if any
  template:
    src: "{{ playbook_dir }}/{{ item.value.src }}"
    dest: "/etc/fluent/conf.d/{{ item.value.dest }}"
    owner: fluentd
    group: fluentd
  with_dict: "{{ fluentd_conf_others | default({}) }}"

- name: copy td-restart scripts
  template: src={{ item }}.sh.j2 dest=/bin/{{ item }}.sh owner=root group=root mode=0744
  with_items:
    - fluentd-start
    - fluentd-stop

- name: log rotation
  template: src=logrotate.j2 dest=/etc/logrotate.d/fluentd owner=root group=root mode=0644

- name: install plugins, if any
  gem:
    name: "{{ item }}"
    executable: /opt/fluent/bin/gem
    state: latest
    user_install: no
  with_items: "{{ fluentd_plugins | default([]) }}"

- name: install plugins with specified versions, if any
  gem:
    name: "{{ item.value.name }}"
    executable: /opt/fluent/bin/gem
    state: present
    version: "{{ item.value.version }}"
    user_install: no
  with_dict: "{{ fluentd_plugins_versions | default({}) }}"

- name: set INIT status and start
  service:
    name: fluentd
    state: started
    enabled: true
  when: fluentd_use_service | bool
